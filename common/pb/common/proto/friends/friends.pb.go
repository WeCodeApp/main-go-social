// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: friends/friends.proto

package friends

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SendFriendRequestRequest is the request for sending a friend request
type SendFriendRequestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user sending the request
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// FriendId is the ID of the user to send the request to
	FriendId      string `protobuf:"bytes,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFriendRequestRequest) Reset() {
	*x = SendFriendRequestRequest{}
	mi := &file_friends_friends_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequestRequest) ProtoMessage() {}

func (x *SendFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*SendFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{0}
}

func (x *SendFriendRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendFriendRequestRequest) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

// GetFriendRequestsRequest is the request for retrieving friend requests
type GetFriendRequestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Status is the status of the requests to retrieve (pending, accepted, rejected)
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Page is the page number for pagination
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Limit is the number of requests per page
	Limit         int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendRequestsRequest) Reset() {
	*x = GetFriendRequestsRequest{}
	mi := &file_friends_friends_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestsRequest) ProtoMessage() {}

func (x *GetFriendRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestsRequest.ProtoReflect.Descriptor instead.
func (*GetFriendRequestsRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{1}
}

func (x *GetFriendRequestsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFriendRequestsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetFriendRequestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFriendRequestsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// AcceptFriendRequestRequest is the request for accepting a friend request
type AcceptFriendRequestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RequestId is the ID of the friend request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// UserId is the ID of the user accepting the request
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptFriendRequestRequest) Reset() {
	*x = AcceptFriendRequestRequest{}
	mi := &file_friends_friends_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptFriendRequestRequest) ProtoMessage() {}

func (x *AcceptFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*AcceptFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptFriendRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AcceptFriendRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// RejectFriendRequestRequest is the request for rejecting a friend request
type RejectFriendRequestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RequestId is the ID of the friend request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// UserId is the ID of the user rejecting the request
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectFriendRequestRequest) Reset() {
	*x = RejectFriendRequestRequest{}
	mi := &file_friends_friends_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectFriendRequestRequest) ProtoMessage() {}

func (x *RejectFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{3}
}

func (x *RejectFriendRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RejectFriendRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetFriendsRequest is the request for retrieving friends
type GetFriendsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Page is the page number for pagination
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Limit is the number of friends per page
	Limit         int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendsRequest) Reset() {
	*x = GetFriendsRequest{}
	mi := &file_friends_friends_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsRequest) ProtoMessage() {}

func (x *GetFriendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsRequest.ProtoReflect.Descriptor instead.
func (*GetFriendsRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{4}
}

func (x *GetFriendsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFriendsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFriendsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// RemoveFriendRequest is the request for removing a friend
type RemoveFriendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// FriendId is the ID of the friend to remove
	FriendId      string `protobuf:"bytes,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFriendRequest) Reset() {
	*x = RemoveFriendRequest{}
	mi := &file_friends_friends_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendRequest) ProtoMessage() {}

func (x *RemoveFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendRequest.ProtoReflect.Descriptor instead.
func (*RemoveFriendRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveFriendRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveFriendRequest) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

// BlockUserRequest is the request for blocking a user
type BlockUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// BlockedUserId is the ID of the user to block
	BlockedUserId string `protobuf:"bytes,2,opt,name=blocked_user_id,json=blockedUserId,proto3" json:"blocked_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserRequest) Reset() {
	*x = BlockUserRequest{}
	mi := &file_friends_friends_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserRequest) ProtoMessage() {}

func (x *BlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserRequest.ProtoReflect.Descriptor instead.
func (*BlockUserRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{6}
}

func (x *BlockUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlockUserRequest) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

// UnblockUserRequest is the request for unblocking a user
type UnblockUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// BlockedUserId is the ID of the user to unblock
	BlockedUserId string `protobuf:"bytes,2,opt,name=blocked_user_id,json=blockedUserId,proto3" json:"blocked_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserRequest) Reset() {
	*x = UnblockUserRequest{}
	mi := &file_friends_friends_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserRequest) ProtoMessage() {}

func (x *UnblockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserRequest.ProtoReflect.Descriptor instead.
func (*UnblockUserRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{7}
}

func (x *UnblockUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnblockUserRequest) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

// GetBlockedUsersRequest is the request for retrieving blocked users
type GetBlockedUsersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Page is the page number for pagination
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Limit is the number of blocked users per page
	Limit         int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedUsersRequest) Reset() {
	*x = GetBlockedUsersRequest{}
	mi := &file_friends_friends_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedUsersRequest) ProtoMessage() {}

func (x *GetBlockedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedUsersRequest.ProtoReflect.Descriptor instead.
func (*GetBlockedUsersRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlockedUsersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBlockedUsersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetBlockedUsersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// CheckFriendshipRequest is the request for checking if two users are friends
type CheckFriendshipRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the first user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// FriendId is the ID of the second user
	FriendId      string `protobuf:"bytes,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFriendshipRequest) Reset() {
	*x = CheckFriendshipRequest{}
	mi := &file_friends_friends_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFriendshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFriendshipRequest) ProtoMessage() {}

func (x *CheckFriendshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFriendshipRequest.ProtoReflect.Descriptor instead.
func (*CheckFriendshipRequest) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{9}
}

func (x *CheckFriendshipRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckFriendshipRequest) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

// FriendRequestResponse is the response containing a friend request
type FriendRequestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RequestId is the ID of the friend request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// SenderId is the ID of the user who sent the request
	SenderId string `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// SenderName is the name of the user who sent the request
	SenderName string `protobuf:"bytes,3,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	// SenderAvatar is the avatar URL of the user who sent the request
	SenderAvatar string `protobuf:"bytes,4,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
	// ReceiverId is the ID of the user who received the request
	ReceiverId string `protobuf:"bytes,5,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// ReceiverName is the name of the user who received the request
	ReceiverName string `protobuf:"bytes,6,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	// ReceiverAvatar is the avatar URL of the user who received the request
	ReceiverAvatar string `protobuf:"bytes,7,opt,name=receiver_avatar,json=receiverAvatar,proto3" json:"receiver_avatar,omitempty"`
	// Status is the status of the request (pending, accepted, rejected)
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// CreatedAt is the timestamp when the request was created
	CreatedAt string `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt is the timestamp when the request was last updated
	UpdatedAt     string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FriendRequestResponse) Reset() {
	*x = FriendRequestResponse{}
	mi := &file_friends_friends_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRequestResponse) ProtoMessage() {}

func (x *FriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRequestResponse.ProtoReflect.Descriptor instead.
func (*FriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{10}
}

func (x *FriendRequestResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FriendRequestResponse) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *FriendRequestResponse) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *FriendRequestResponse) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

func (x *FriendRequestResponse) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *FriendRequestResponse) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *FriendRequestResponse) GetReceiverAvatar() string {
	if x != nil {
		return x.ReceiverAvatar
	}
	return ""
}

func (x *FriendRequestResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FriendRequestResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FriendRequestResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// GetFriendRequestsResponse is the response containing friend requests
type GetFriendRequestsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requests is an array of friend requests
	Requests []*FriendRequestResponse `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// TotalCount is the total number of friend requests
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Page is the current page number
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// TotalPages is the total number of pages
	TotalPages    int32 `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendRequestsResponse) Reset() {
	*x = GetFriendRequestsResponse{}
	mi := &file_friends_friends_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestsResponse) ProtoMessage() {}

func (x *GetFriendRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestsResponse.ProtoReflect.Descriptor instead.
func (*GetFriendRequestsResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{11}
}

func (x *GetFriendRequestsResponse) GetRequests() []*FriendRequestResponse {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetFriendRequestsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetFriendRequestsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFriendRequestsResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// FriendResponse is the response containing a friend
type FriendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the friend
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Name is the name of the friend
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Avatar is the avatar URL of the friend
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// Email is the email of the friend
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// FriendsSince is the timestamp when the friendship was created
	FriendsSince  string `protobuf:"bytes,5,opt,name=friends_since,json=friendsSince,proto3" json:"friends_since,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FriendResponse) Reset() {
	*x = FriendResponse{}
	mi := &file_friends_friends_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendResponse) ProtoMessage() {}

func (x *FriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendResponse.ProtoReflect.Descriptor instead.
func (*FriendResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{12}
}

func (x *FriendResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FriendResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FriendResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FriendResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FriendResponse) GetFriendsSince() string {
	if x != nil {
		return x.FriendsSince
	}
	return ""
}

// GetFriendsResponse is the response containing friends
type GetFriendsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Friends is an array of friends
	Friends []*FriendResponse `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
	// TotalCount is the total number of friends
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Page is the current page number
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// TotalPages is the total number of pages
	TotalPages    int32 `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendsResponse) Reset() {
	*x = GetFriendsResponse{}
	mi := &file_friends_friends_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsResponse) ProtoMessage() {}

func (x *GetFriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsResponse.ProtoReflect.Descriptor instead.
func (*GetFriendsResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{13}
}

func (x *GetFriendsResponse) GetFriends() []*FriendResponse {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *GetFriendsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetFriendsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFriendsResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// RemoveFriendResponse is the response for removing a friend
type RemoveFriendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success indicates if the friend was successfully removed
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFriendResponse) Reset() {
	*x = RemoveFriendResponse{}
	mi := &file_friends_friends_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendResponse) ProtoMessage() {}

func (x *RemoveFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendResponse.ProtoReflect.Descriptor instead.
func (*RemoveFriendResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveFriendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// BlockUserResponse is the response for blocking a user
type BlockUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success indicates if the user was successfully blocked
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserResponse) Reset() {
	*x = BlockUserResponse{}
	mi := &file_friends_friends_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResponse) ProtoMessage() {}

func (x *BlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResponse.ProtoReflect.Descriptor instead.
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{15}
}

func (x *BlockUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// UnblockUserResponse is the response for unblocking a user
type UnblockUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success indicates if the user was successfully unblocked
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserResponse) Reset() {
	*x = UnblockUserResponse{}
	mi := &file_friends_friends_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResponse) ProtoMessage() {}

func (x *UnblockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResponse.ProtoReflect.Descriptor instead.
func (*UnblockUserResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{16}
}

func (x *UnblockUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// BlockedUserResponse is the response containing a blocked user
type BlockedUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserId is the ID of the blocked user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Name is the name of the blocked user
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Avatar is the avatar URL of the blocked user
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// BlockedAt is the timestamp when the user was blocked
	BlockedAt     string `protobuf:"bytes,4,opt,name=blocked_at,json=blockedAt,proto3" json:"blocked_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockedUserResponse) Reset() {
	*x = BlockedUserResponse{}
	mi := &file_friends_friends_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUserResponse) ProtoMessage() {}

func (x *BlockedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUserResponse.ProtoReflect.Descriptor instead.
func (*BlockedUserResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{17}
}

func (x *BlockedUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlockedUserResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockedUserResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BlockedUserResponse) GetBlockedAt() string {
	if x != nil {
		return x.BlockedAt
	}
	return ""
}

// GetBlockedUsersResponse is the response containing blocked users
type GetBlockedUsersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BlockedUsers is an array of blocked users
	BlockedUsers []*BlockedUserResponse `protobuf:"bytes,1,rep,name=blocked_users,json=blockedUsers,proto3" json:"blocked_users,omitempty"`
	// TotalCount is the total number of blocked users
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Page is the current page number
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// TotalPages is the total number of pages
	TotalPages    int32 `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedUsersResponse) Reset() {
	*x = GetBlockedUsersResponse{}
	mi := &file_friends_friends_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedUsersResponse) ProtoMessage() {}

func (x *GetBlockedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedUsersResponse.ProtoReflect.Descriptor instead.
func (*GetBlockedUsersResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{18}
}

func (x *GetBlockedUsersResponse) GetBlockedUsers() []*BlockedUserResponse {
	if x != nil {
		return x.BlockedUsers
	}
	return nil
}

func (x *GetBlockedUsersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetBlockedUsersResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetBlockedUsersResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// CheckFriendshipResponse is the response for checking if two users are friends
type CheckFriendshipResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AreFriends indicates if the users are friends
	AreFriends bool `protobuf:"varint,1,opt,name=are_friends,json=areFriends,proto3" json:"are_friends,omitempty"`
	// Status is the status of the friendship (none, pending, friends, blocked)
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// RequestId is the ID of the friend request if status is pending
	RequestId     string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFriendshipResponse) Reset() {
	*x = CheckFriendshipResponse{}
	mi := &file_friends_friends_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFriendshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFriendshipResponse) ProtoMessage() {}

func (x *CheckFriendshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friends_friends_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFriendshipResponse.ProtoReflect.Descriptor instead.
func (*CheckFriendshipResponse) Descriptor() ([]byte, []int) {
	return file_friends_friends_proto_rawDescGZIP(), []int{19}
}

func (x *CheckFriendshipResponse) GetAreFriends() bool {
	if x != nil {
		return x.AreFriends
	}
	return false
}

func (x *CheckFriendshipResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CheckFriendshipResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_friends_friends_proto protoreflect.FileDescriptor

const file_friends_friends_proto_rawDesc = "" +
	"\n" +
	"\x15friends/friends.proto\x12\afriends\"P\n" +
	"\x18SendFriendRequestRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\tR\bfriendId\"u\n" +
	"\x18GetFriendRequestsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"T\n" +
	"\x1aAcceptFriendRequestRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"T\n" +
	"\x1aRejectFriendRequestRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"V\n" +
	"\x11GetFriendsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"K\n" +
	"\x13RemoveFriendRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\tR\bfriendId\"S\n" +
	"\x10BlockUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12&\n" +
	"\x0fblocked_user_id\x18\x02 \x01(\tR\rblockedUserId\"U\n" +
	"\x12UnblockUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12&\n" +
	"\x0fblocked_user_id\x18\x02 \x01(\tR\rblockedUserId\"[\n" +
	"\x16GetBlockedUsersRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"N\n" +
	"\x16CheckFriendshipRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\tR\bfriendId\"\xde\x02\n" +
	"\x15FriendRequestResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\tR\bsenderId\x12\x1f\n" +
	"\vsender_name\x18\x03 \x01(\tR\n" +
	"senderName\x12#\n" +
	"\rsender_avatar\x18\x04 \x01(\tR\fsenderAvatar\x12\x1f\n" +
	"\vreceiver_id\x18\x05 \x01(\tR\n" +
	"receiverId\x12#\n" +
	"\rreceiver_name\x18\x06 \x01(\tR\freceiverName\x12'\n" +
	"\x0freceiver_avatar\x18\a \x01(\tR\x0ereceiverAvatar\x12\x16\n" +
	"\x06status\x18\b \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\tR\tupdatedAt\"\xad\x01\n" +
	"\x19GetFriendRequestsResponse\x12:\n" +
	"\brequests\x18\x01 \x03(\v2\x1e.friends.FriendRequestResponseR\brequests\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1f\n" +
	"\vtotal_pages\x18\x04 \x01(\x05R\n" +
	"totalPages\"\x90\x01\n" +
	"\x0eFriendResponse\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\x03 \x01(\tR\x06avatar\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12#\n" +
	"\rfriends_since\x18\x05 \x01(\tR\ffriendsSince\"\x9d\x01\n" +
	"\x12GetFriendsResponse\x121\n" +
	"\afriends\x18\x01 \x03(\v2\x17.friends.FriendResponseR\afriends\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1f\n" +
	"\vtotal_pages\x18\x04 \x01(\x05R\n" +
	"totalPages\"0\n" +
	"\x14RemoveFriendResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"-\n" +
	"\x11BlockUserResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"/\n" +
	"\x13UnblockUserResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"y\n" +
	"\x13BlockedUserResponse\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\x03 \x01(\tR\x06avatar\x12\x1d\n" +
	"\n" +
	"blocked_at\x18\x04 \x01(\tR\tblockedAt\"\xb2\x01\n" +
	"\x17GetBlockedUsersResponse\x12A\n" +
	"\rblocked_users\x18\x01 \x03(\v2\x1c.friends.BlockedUserResponseR\fblockedUsers\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1f\n" +
	"\vtotal_pages\x18\x04 \x01(\x05R\n" +
	"totalPages\"q\n" +
	"\x17CheckFriendshipResponse\x12\x1f\n" +
	"\vare_friends\x18\x01 \x01(\bR\n" +
	"areFriends\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"request_id\x18\x03 \x01(\tR\trequestId2\xc9\x06\n" +
	"\rFriendService\x12V\n" +
	"\x11SendFriendRequest\x12!.friends.SendFriendRequestRequest\x1a\x1e.friends.FriendRequestResponse\x12Z\n" +
	"\x11GetFriendRequests\x12!.friends.GetFriendRequestsRequest\x1a\".friends.GetFriendRequestsResponse\x12Z\n" +
	"\x13AcceptFriendRequest\x12#.friends.AcceptFriendRequestRequest\x1a\x1e.friends.FriendRequestResponse\x12Z\n" +
	"\x13RejectFriendRequest\x12#.friends.RejectFriendRequestRequest\x1a\x1e.friends.FriendRequestResponse\x12E\n" +
	"\n" +
	"GetFriends\x12\x1a.friends.GetFriendsRequest\x1a\x1b.friends.GetFriendsResponse\x12K\n" +
	"\fRemoveFriend\x12\x1c.friends.RemoveFriendRequest\x1a\x1d.friends.RemoveFriendResponse\x12B\n" +
	"\tBlockUser\x12\x19.friends.BlockUserRequest\x1a\x1a.friends.BlockUserResponse\x12H\n" +
	"\vUnblockUser\x12\x1b.friends.UnblockUserRequest\x1a\x1c.friends.UnblockUserResponse\x12T\n" +
	"\x0fGetBlockedUsers\x12\x1f.friends.GetBlockedUsersRequest\x1a .friends.GetBlockedUsersResponse\x12T\n" +
	"\x0fCheckFriendship\x12\x1f.friends.CheckFriendshipRequest\x1a .friends.CheckFriendshipResponseB\x16Z\x14common/proto/friendsb\x06proto3"

var (
	file_friends_friends_proto_rawDescOnce sync.Once
	file_friends_friends_proto_rawDescData []byte
)

func file_friends_friends_proto_rawDescGZIP() []byte {
	file_friends_friends_proto_rawDescOnce.Do(func() {
		file_friends_friends_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_friends_friends_proto_rawDesc), len(file_friends_friends_proto_rawDesc)))
	})
	return file_friends_friends_proto_rawDescData
}

var file_friends_friends_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_friends_friends_proto_goTypes = []any{
	(*SendFriendRequestRequest)(nil),   // 0: friends.SendFriendRequestRequest
	(*GetFriendRequestsRequest)(nil),   // 1: friends.GetFriendRequestsRequest
	(*AcceptFriendRequestRequest)(nil), // 2: friends.AcceptFriendRequestRequest
	(*RejectFriendRequestRequest)(nil), // 3: friends.RejectFriendRequestRequest
	(*GetFriendsRequest)(nil),          // 4: friends.GetFriendsRequest
	(*RemoveFriendRequest)(nil),        // 5: friends.RemoveFriendRequest
	(*BlockUserRequest)(nil),           // 6: friends.BlockUserRequest
	(*UnblockUserRequest)(nil),         // 7: friends.UnblockUserRequest
	(*GetBlockedUsersRequest)(nil),     // 8: friends.GetBlockedUsersRequest
	(*CheckFriendshipRequest)(nil),     // 9: friends.CheckFriendshipRequest
	(*FriendRequestResponse)(nil),      // 10: friends.FriendRequestResponse
	(*GetFriendRequestsResponse)(nil),  // 11: friends.GetFriendRequestsResponse
	(*FriendResponse)(nil),             // 12: friends.FriendResponse
	(*GetFriendsResponse)(nil),         // 13: friends.GetFriendsResponse
	(*RemoveFriendResponse)(nil),       // 14: friends.RemoveFriendResponse
	(*BlockUserResponse)(nil),          // 15: friends.BlockUserResponse
	(*UnblockUserResponse)(nil),        // 16: friends.UnblockUserResponse
	(*BlockedUserResponse)(nil),        // 17: friends.BlockedUserResponse
	(*GetBlockedUsersResponse)(nil),    // 18: friends.GetBlockedUsersResponse
	(*CheckFriendshipResponse)(nil),    // 19: friends.CheckFriendshipResponse
}
var file_friends_friends_proto_depIdxs = []int32{
	10, // 0: friends.GetFriendRequestsResponse.requests:type_name -> friends.FriendRequestResponse
	12, // 1: friends.GetFriendsResponse.friends:type_name -> friends.FriendResponse
	17, // 2: friends.GetBlockedUsersResponse.blocked_users:type_name -> friends.BlockedUserResponse
	0,  // 3: friends.FriendService.SendFriendRequest:input_type -> friends.SendFriendRequestRequest
	1,  // 4: friends.FriendService.GetFriendRequests:input_type -> friends.GetFriendRequestsRequest
	2,  // 5: friends.FriendService.AcceptFriendRequest:input_type -> friends.AcceptFriendRequestRequest
	3,  // 6: friends.FriendService.RejectFriendRequest:input_type -> friends.RejectFriendRequestRequest
	4,  // 7: friends.FriendService.GetFriends:input_type -> friends.GetFriendsRequest
	5,  // 8: friends.FriendService.RemoveFriend:input_type -> friends.RemoveFriendRequest
	6,  // 9: friends.FriendService.BlockUser:input_type -> friends.BlockUserRequest
	7,  // 10: friends.FriendService.UnblockUser:input_type -> friends.UnblockUserRequest
	8,  // 11: friends.FriendService.GetBlockedUsers:input_type -> friends.GetBlockedUsersRequest
	9,  // 12: friends.FriendService.CheckFriendship:input_type -> friends.CheckFriendshipRequest
	10, // 13: friends.FriendService.SendFriendRequest:output_type -> friends.FriendRequestResponse
	11, // 14: friends.FriendService.GetFriendRequests:output_type -> friends.GetFriendRequestsResponse
	10, // 15: friends.FriendService.AcceptFriendRequest:output_type -> friends.FriendRequestResponse
	10, // 16: friends.FriendService.RejectFriendRequest:output_type -> friends.FriendRequestResponse
	13, // 17: friends.FriendService.GetFriends:output_type -> friends.GetFriendsResponse
	14, // 18: friends.FriendService.RemoveFriend:output_type -> friends.RemoveFriendResponse
	15, // 19: friends.FriendService.BlockUser:output_type -> friends.BlockUserResponse
	16, // 20: friends.FriendService.UnblockUser:output_type -> friends.UnblockUserResponse
	18, // 21: friends.FriendService.GetBlockedUsers:output_type -> friends.GetBlockedUsersResponse
	19, // 22: friends.FriendService.CheckFriendship:output_type -> friends.CheckFriendshipResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_friends_friends_proto_init() }
func file_friends_friends_proto_init() {
	if File_friends_friends_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_friends_friends_proto_rawDesc), len(file_friends_friends_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_friends_friends_proto_goTypes,
		DependencyIndexes: file_friends_friends_proto_depIdxs,
		MessageInfos:      file_friends_friends_proto_msgTypes,
	}.Build()
	File_friends_friends_proto = out.File
	file_friends_friends_proto_goTypes = nil
	file_friends_friends_proto_depIdxs = nil
}
